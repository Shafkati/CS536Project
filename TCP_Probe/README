CS244 PA3: TCP Pacing

Antonin Bas (antoninb@stanford.edu)
Diego Pontoriero (dpontori@stanford.edu)

CONFIGURATION

Simulations should be run on an Amazon EC2 c1.xlarge instance, using
one of the following AMIs:

East: ami-97921bfe
West: ami-7eab204e

These AMIs have Mininet and all other required packages installed.

INSTALLATION

(1) Download this repository.

$ git clone https://bitbucket.org/antoninb/cs244-project-tcppacing.git
$ cd cs244-project-tcppacing

(2) Install the new kernel.

$ sudo dpkg -i kernel_packages/linux-headers*.deb kernel_packages/linux-image*.deb

Note: if you see any error messages like the following, they are most
likely safe to ignore:

/usr/sbin/grub-probe: warning: disk does not exist, so falling back to partition device /dev/xvda1.
/usr/sbin/grub-probe: error: cannot find a GRUB drive for /dev/xvda1.  Check your device.map.

(3) Reboot.

$ sudo reboot

(4) Install the modified version of iperf from PA2

$ ./build-patched-iperf.sh

RUNNING

From the cs244-project-tcppacing directory:

$ sudo ./run.sh
---> results will be placed in tcppacing-$timestamp/

$ sudo ./run_mflows.sh
---> results will be placed in tcppacing-manyflows-$timestamp/

For running the PA2 simulation and compare buffersizing with and
without pacing, type the following command:

$ sudo ./run_buffersizing.sh
---> results will be placed in buffersizing-$timestamp/

Please refer to the blog post for more information regarding the
simulations.

APPENDIX: PATCHING AND COMPILING THE LINUX KERNEL

This step is unnecessary if you used the pre-built binary packages
above. However, if you would like to change our patch and compile your
own kernel, please follow the instructions below.

These instructions assume an Ubuntu 12.10 EC2 instance using one of
the AMIs mentioned above. Compilation is CPU- and memory-intensive; we
recommend using at least a c1.medium instance.

Step 0: Create a directory on a partition with enough space.

You need >10GB to compile the kernel. Amazon instances typically have
a large ephemeral storage partition mounted at /mnt.

$ sudo mkdir /mnt/kernel
$ sudo chown ubuntu:ubuntu /mnt/kernel
$ cd /mnt/kernel

Step 1: Install the compiler toolchain.

$ sudo apt-get install fakeroot build-essential crash kexec-tools makedumpfile kernel-wedge
$ sudo apt-get build-dep linux
$ sudo apt-get install git-core libncurses5 libncurses5-dev libelf-dev asciidoc binutils-dev

Step 2: Download the kernel sources.

$ sudo apt-get build-dep --no-install-recommends linux-image-$(uname -r)
$ apt-get source linux-image-$(uname -r)
$ cd kernel-3.5.0
$ chmod -R u+x debian/scripts/*

Step 3: Apply our patch.

$ patch -p1 < ~/cs244-project-tcppacing/cs244-tcp-pacing-patch.txt

Step 4: Update the kernel configuration to enable the patch.

$ debian/rules updateconfigs
...
TCP Spacing and bandwidth estimation (TCP_PACING) [N/y/?] (NEW) y

(The prompt may appear multiple times. Simply answer “y” to all
occurrences).

Step 5: Compile the kernel.

$ fakeroot debian/rules clean
$ DEB_BUILD_OPTIONS=parallel=2 AUTOBUILD=1 NOEXTRAS=1 skipabi=true fakeroot debian/rules binary-generic

(You may update the parallel= directive to reflect the number of cores
available on your instance type).

Step 6: Install the kernel and reboot.

$ cd ..
$ sudo dpkg -i linux-headers*.deb linux-image*.deb
$ sudo reboot

ACKNOWLEDGMENTS

The patch contained here is based on a freely distributed patch by
Daniele Lacamera and released under the GPL. The original patch and
more information can be found at the project website:

http://sourceforge.net/projects/multitcp/